version: '3.5'

services:
  postgres:
    container_name: postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - global-network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin:/var/lib/pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    networks:
      - global-network

  api:
    container_name: api
    depends_on:
      - postgres
    build:
      context: ./api
      dockerfile: Dockerfile.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - PORT=3000
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - global-network
    tty: true

  client:
    container_name: client
    stdin_open: true
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    environment:
      - CHOKIDAR_USEPOLLING=true
      - API_HOST=${APP_HOST}
      - API_PORT=${APP_PORT}
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - global-network

  nginx:
    container_name: nginx
    depends_on:
      - api
      - client
    restart: always
    build: ./nginx
    ports:
      - "${APP_PORT}:80"
    networks:
      - global-network


volumes:
  pgdata:
  pgadmin:

networks:
  global-network:
    name: Global
    driver: bridge
